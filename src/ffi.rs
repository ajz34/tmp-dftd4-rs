/* automatically generated by rust-bindgen 0.69.4 and has been modified after */

#[doc = "Error handle class"]
pub type dftd4_error = *mut std::ffi::c_void;

#[doc = "Molecular structure data class"]
pub type dftd4_structure = *mut std::ffi::c_void;

#[doc = "Dispersion model class"]
pub type dftd4_model = *mut std::ffi::c_void;

#[doc = "Damping parameter class"]
pub type dftd4_param = *mut std::ffi::c_void;

extern "C" {
    #[doc = "Obtain library version as major * 10000 + minor + 100 + patch"]
    pub fn dftd4_get_version() -> std::ffi::c_int;
}
extern "C" {
    #[doc = "Create new error handle object"]
    pub fn dftd4_new_error() -> dftd4_error;
}
extern "C" {
    #[doc = "Check error handle status"]
    pub fn dftd4_check_error(arg1: dftd4_error) -> std::ffi::c_int;
}
extern "C" {
    #[doc = "Get error message from error handle"]
    pub fn dftd4_get_error(
        arg1: dftd4_error,
        arg2: *mut std::ffi::c_char,
        arg3: *const std::ffi::c_int,
    );
}
extern "C" {
    #[doc = "Delete error handle object"]
    pub fn dftd4_delete_error(arg1: *mut dftd4_error);
}
extern "C" {
    #[doc = "Create new molecular structure data (quantities in Bohr)"]
    pub fn dftd4_new_structure(
        arg1: dftd4_error,
        arg2: std::ffi::c_int,
        arg3: *const std::ffi::c_int,
        arg4: *const f64,
        arg5: *const f64,
        arg6: *const f64,
        arg7: *const bool,
    ) -> dftd4_structure;
}
extern "C" {
    #[doc = "Delete molecular structure data"]
    pub fn dftd4_delete_structure(arg1: *mut dftd4_structure);
}
extern "C" {
    #[doc = "Update coordinates and lattice parameters (quantities in Bohr)"]
    pub fn dftd4_update_structure(
        arg1: dftd4_error,
        arg2: dftd4_structure,
        arg3: *const f64,
        arg4: *const f64,
    );
}
extern "C" {
    #[doc = "Create new D4 dispersion model"]
    pub fn dftd4_new_d4_model(arg1: dftd4_error, arg2: dftd4_structure) -> dftd4_model;
}
extern "C" {
    #[doc = "Create new D4 dispersion model"]
    pub fn dftd4_new_d4s_model(arg1: dftd4_error, arg2: dftd4_structure) -> dftd4_model;
}
extern "C" {
    #[doc = "Create new D4 dispersion model"]
    pub fn dftd4_custom_d4_model(
        arg1: dftd4_error,
        arg2: dftd4_structure,
        arg3: f64,
        arg4: f64,
        arg5: f64,
    ) -> dftd4_model;
}
extern "C" {
    #[doc = "Create new D4 dispersion model"]
    pub fn dftd4_custom_d4s_model(
        arg1: dftd4_error,
        arg2: dftd4_structure,
        arg3: f64,
        arg4: f64,
    ) -> dftd4_model;
}
extern "C" {
    #[doc = "Delete dispersion model"]
    pub fn dftd4_delete_model(arg1: *mut dftd4_model);
}
extern "C" {
    #[doc = "Create new rational damping parameters"]
    pub fn dftd4_new_rational_damping(
        arg1: dftd4_error,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
    ) -> dftd4_param;
}
extern "C" {
    #[doc = "Load rational damping parameters from internal storage"]
    pub fn dftd4_load_rational_damping(
        arg1: dftd4_error,
        arg2: *mut std::ffi::c_char,
        arg3: bool,
    ) -> dftd4_param;
}
extern "C" {
    #[doc = "Delete damping parameters"]
    pub fn dftd4_delete_param(arg1: *mut dftd4_param);
}
extern "C" {
    #[doc = "Evaluate properties related to the dispersion model"]
    pub fn dftd4_get_properties(
        arg1: dftd4_error,
        arg2: dftd4_structure,
        arg3: dftd4_model,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut f64,
    );
}
extern "C" {
    #[doc = "Evaluate the dispersion energy and its derivative"]
    pub fn dftd4_get_dispersion(
        arg1: dftd4_error,
        arg2: dftd4_structure,
        arg3: dftd4_model,
        arg4: dftd4_param,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut f64,
    );
}
extern "C" {
    #[doc = "Evaluate the dispersion hessian numerically"]
    pub fn dftd4_get_numerical_hessian(
        arg1: dftd4_error,
        arg2: dftd4_structure,
        arg3: dftd4_model,
        arg4: dftd4_param,
        arg5: *mut f64,
    );
}
extern "C" {
    #[doc = "Evaluate the pairwise representation of the dispersion energy"]
    pub fn dftd4_get_pairwise_dispersion(
        arg1: dftd4_error,
        arg2: dftd4_structure,
        arg3: dftd4_model,
        arg4: dftd4_param,
        arg5: *mut f64,
        arg6: *mut f64,
    );
}
